# LAMMPS input file. Automaticly created by pyLAMMPS

# Define general settings

units real
dimension 3
boundary p p p
atom_style full

# Read system

{% if restart_flag %}read_restart   {{data_file}}{% else %}read_data   {{data_file}}{%- endif %}

# Include force field paramters

include   {{force_field_file}}

# Define the neighbor list settings

neighbor 2.0 bin
neigh_modify every 1 delay 0 check yes 

{%- if deformation is defined %}


# ============= Deformation =============

variable  deform_rate equal {{deformation.rate}}

{%- if deformation.direction == "xx" %}

# Deformation in xx direction
variable delta equal ${deform_rate}*lx
variable deltaxy equal ${deform_rate}*xy
variable deltaxz equal ${deform_rate}*xz

change_box all x delta 0 ${delta} xy delta ${deltaxy} xz delta ${deltaxz} remap units box

{%- elif deformation.direction == "yy" %}

# Deformation in yy direction
variable delta equal ${deform_rate}*ly
variable deltayz equal ${deform_rate}*yz

change_box all y delta 0 ${delta} yz delta ${deltayz} remap units box

{%- elif deformation.direction == "zz" %}

# Deformation in zz direction
variable delta equal ${deform_rate}*lz

change_box all z delta 0 ${delta} remap units box

{%- elif deformation.direction == "xy" %}

# Deformation in xy direction
variable delta equal ${deform_rate}*ly

change_box all xy delta ${delta} remap units box

{%- elif deformation.direction == "xz" %}

# Deformation in xz direction
variable delta equal ${deform_rate}*lz

change_box all xz delta ${delta} remap units box

{%- elif deformation.direction == "yz" %}

# Deformation in yz direction
variable delta equal ${deform_rate}*lz

change_box all yz delta ${delta} remap units box

{%- elif deformation.direction == "undeformed" %}

# Undeformed box
change_box all triclinic
{%- endif %}

{% endif %}

# ============= INITIAL SYSTEM SETUP =============

# ------------- general ---------------

variable  project             index       {{ensemble_name}}
variable  timestep            equal       {{system.dt}}
variable  run_time            equal       {{system.nsteps}}

timestep  ${timestep}

# ------------- set integration settings ---------------

{% for var,val in ensemble.var_val %}
variable {{var}}  equal {{val}}
{%- endfor %}

{%- if not restart_flag  %}

variable seed  equal {{seed}}       

# ------------- generate velocities ---------------

velocity        all create ${temperature} ${seed} rot yes dist gaussian
{%- endif %}

# ------------- time integration ---------------

{{ensemble.command}}


# ============= VARIABLES ===============

# ------------- output ---------------

variable  sample_frequency    equal       {{sampling_time.frequency}}
variable  sample_number       equal       {{sampling_time.number}}
variable  to_file_every       equal       $(v_sample_frequency*v_sample_number)
variable  to_screen_every     equal       $(v_to_file_every*10)
      
# ------------- values ---------------

variable step equal step

# ============= SAMPLING CONDITIONS ============= 

thermo          ${to_screen_every}
thermo_style    custom step temp press pe ke etotal enthalpy vol density 

{% for sample_name, sample_set in sampling.items() %}

# Sample: {{sample_name}}

{%- if sample_set.variables|select|first %}

# Define sample variables
{% for var in sample_set.variables %}
variable {{var.out}}  equal {{var.lammps}}
{%- endfor %}
{%- endif %}

{%- if sample_set.verbatim|select|first %}

# Define any further verbatim input
{% for var in sample_set.verbatim %}
{{var}}
{%- endfor %}
{%- endif %}

{{sample_set.command}}


{% endfor %}

# ============= RUN CONDITIONS =============

run             ${run_time}

# Write restart after successful simulation

write_restart ${project}.restart

# Additionally write data file

write_data ${project}.data nocoeff nofix